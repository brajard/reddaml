#This file describes the key parameters of the reference experiment for the training (Table 1. in the article)

#WARNING: parameters should be in a list (even of size 1)

#Size of the state ($N_x$ in the article)
p: [18, 27, 36]

#Observation time sampling ($\Delta_t$ in the article) in MTU
dtObs: [0.01, 0.05, 0.1, 0.15]

#Additive model noise standard deviation for DA (for 1 time step)
std_m: [0.06]

#Observation standard deviation ($\sigma^{\rm o}$ in the article)
std_o: [0.05, 0.1, 0.2, 0.5, 1., 2.]

#Fitering of the training set after DA (size of the window used for averaging in  number of time steps):
Nfil_train: [1, 5]

#Time length of the simulation
T: [1500.]

#Number of ensemble in the simulation
N: [1]

#seed for the random initialisation of the simulation
seed: [5]

#THE FOLLOWING PARAMETERS ARE CONSTANT (NOT IN A LIST)
# It means they cannot be used for a sensitivity experiment using only one configuration file


#Type of obs (perfect/noisy)
obstype: 'noisy'

## PARAMETER FOR DATA ASSIMILATION
#da method for data assimilation
damethod: 'EnKF_N'

#Parameters of the damethod
paramda:
 N: 50

## PARAMETER FOR NN TRAINING

# First values to discard in the time seris (DA spinup)
burn: 100

# First index of the validation set
ival : -1000

# Maximum size of the training set
maxtrain: 10000

archi:
 - [43, 5, 'tanh']
 - [28, 1, 'tanh']

parnn:
 optimizer: 'RMSprop' #Optimizer used in the NN (see Keras optimizers)
 reg: 0.072 #L2 regularization term on the last layer
 batch_size: 33 # Mini batchsize used in training
 batch_layer: 1 # Position of the batchlayer in the neural net (-1 for no batchlayer)
 epochs: 100 # Number of epochs in training
 verbose: 1 # Verbose argument of the fit method
 seed: 2020

#Directory where to save the simualtions
savedir: 'simul/train'
weightsdir: 'weights'

#Template name of the files used in the experiments
template:
 #Initilisation file (generates by the true model)
 initname: 'init-N{N}-seed{seed}.npy'

 #True simulation
 truth: 'simul-truth-T{T}-N{N}-seed{seed}.npz'

 #Trunc simulation
 trunc:  'simul-trunc-T{T}-N{N}-seed{seed}.npz'

 #output of DA
 da: 'analysis-EnKFN-p{p}-dtObs{dtObs}-std_o{std_o}.npz'

 #traininset
 train: 'train-EnKFN-p{p}-dtObs{dtObs}-std_o{std_o}.npz'

 #Weights of the NN
 weights: 'weight-EnKFN-p{p}-dtObs{dtObs}-std_o{std_o}.h5'

 #History of the NN training
 history:  'weight-EnKFN-p{p}-dtObs{dtObs}-std_o{std_o}.npz'

 #Hybrid simulation
 hybrid: 'simul-hybrid-p{p}-dtObs{dtObs}-std_o{std_o}-filter{Nfil_train}-N{N}-seed{seed}.npz'